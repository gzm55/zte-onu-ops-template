---
- hosts: target_onu
  gather_facts: False
  vars:
    cmds: []
    WANC2: []
    WANC2_keys: []
    wan_name_pat: ^([1-9][0-9]*)_(INTERNET|Other)_([BR])_VID_([0-9]*)$
  tasks:
  - name: Print tables
    register: raw_cfgs
    when: WANC
    check_mode: False
    ansible.netcommon.telnet:
      login_prompt: "Login: "
      port: "{{ ansible_port }}"
      prompts: [ " #" ]
      timeout: 5
      command: sendcmd 1 DB p WANC
    changed_when: False
    failed_when: raw_cfgs is failed or
      raw_cfgs.stdout is not search('<Tbl name="WANC"', multiline=True)

  - name: Row counts
    when: WANC
    set_fact:
      count: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"WANC\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"

  - name: Check WANC config
    loop: "{{ WANC | d([]) }}"
    ansible.builtin.assert:
      that:
      # use web interface to create placeholder wan ports
      - item._idx is defined
      - 0 <= item._idx
      - item._idx < count

      # cannot
      - (item._has_ipv4 | d(True)) or (item._has_ipv4 | d(False))

      - item.WANCName is defined
      - item.WANCName is match(wan_name_pat)

      - item.VLANID is not defined
      - item.MCVLANID is not defined or (-1 <= item.MCVLANID and item.MCVLANID <= 4094 and item.MCVLANID != 0)

  - name: Expand WANC
    loop: "{{ WANC | d([]) }}"
    vars:
      parse: "{{ item.WANCName
        | ansible.builtin.regex_search(wan_name_pat, '\\1', '\\2', '\\3', '\\4') }}"
      defwan:
        WANCType: "{{ item._is_pppoe | d(True) | ternary(0, 1) }}"
        IPMode: "{{ (item._has_ipv4 | d(True) | ternary(1, 0)) + (item._has_ipv6 | d(True) | ternary(2, 0)) }}"

        # 1 for route
        # 2 for bridge ipoe
        # 4 for bridge pppoe
        ConnType: "{{ (parse[2] == 'R') | ternary(1,
            item._is_pppoe | d(True) | ternary(4, 2) ) }}"
        MediaType: 2
        WancIndex: "{{ parse[0] }}"
        StrServList: "{{ (parse[1] == 'Other') | ternary('OTHER', parse[1]) }}"
        ServList: "{{ (parse[1] == 'Other') | ternary(8, 1) }}"
        VLANID: "{{ (parse[3] == '') | ternary('0', parse[3]) | int }}"
        Priority: "{{ (parse[1] == 'Other') | ternary(4, 0) }}"

        IgmpProxyEnable: "{{ (item.MCVLANID | d(-1) > 0) | ternary(1, None) }}"
        MLDProxyEnable: "{{ (item.MCVLANID | d(-1) > 0) | ternary(1, None) }}"

      merged: "{{ defwan
        | ansible.builtin.combine(item)
        | ansible.builtin.combine((defwan.ConnType==1) | ternary({}, {'IsNAT':None, 'IsNAT6':None})) }}"
      flattened: "{{ [ item._idx ] | product(merged
         | dict2items
         | rejectattr('key', 'match', '_')
         | rejectattr('value', 'none')) }}"
    set_fact:
      # [ [_idx, {key:.., value: ...} ] ]
      WANC2: "{{ WANC2 + flattened }}"
      WANC2_keys: "{{ WANC2_keys | union(merged | dict2items | map(attribute='key')) }}"
    failed_when: not (0 <= merged.VLANID and merged.VLANID <= 4094)

  - name: Check keys
    when: WANC
    loop: "{{ WANC2_keys | reject('match', '_') }}"
    ansible.builtin.assert:
      that:
      - raw_cfgs.stdout is search('<DM name="' + item + '"', multiline=True)
      msg: Table WANC does not contain the {{item}} key

  - name: Check WANCType
    # [ [_idx, {key:.., value: ...} ] ]
    loop: "{{ WANC2 }}"
    vars:
      idx: "{{ item[0] }}"
      key: "{{ item[1].key }}"
      val: "{{ item[1].value }}"
      pat: <Row No="{{idx}}">(?:[^<]*<DM)*[^<]*<DM name="{{key|e|regex_escape}}" val="{{val|e|regex_escape}}"
    when:
    - WANC
    - key == 'WANCType'
    ansible.builtin.assert:
      that:
      - raw_cfgs.stdout is search(pat, multiline=True)
      msg: WANCType {{val}} for row {{idx}} must be set manually on web

  - name: Check VLANID
    # [ [_idx, {key:.., value: ...} ] ]
    loop: "{{ WANC2 }}"
    vars:
      idx: "{{ item[0] }}"
      key: "{{ item[1].key }}"
      val: "{{ item[1].value }}"
      patV: <Row No="{{idx}}">(?:[^<]*<DM)*[^<]*<DM name="{{key|e|regex_escape}}" val="{{val|e|regex_escape}}"
      pat0: <Row No="{{idx}}">(?:[^<]*<DM)*[^<]*<DM name="{{key|e|regex_escape}}" val="0"
    when:
    - WANC
    - key == 'VLANID'
    - raw_cfgs.stdout is not search(patV, multiline=True)
    ansible.builtin.assert:
      that:
      - val != "0"
      - raw_cfgs.stdout is not search(pat0, multiline=True)
      msg: Change from untag or into untag on web

  - name: Compare values
    # [ [_idx, {key:.., value: ...} ] ]
    loop: "{{ WANC2 }}"
    vars:
      idx: "{{ item[0] }}"
      key: "{{ item[1].key }}"
      val: "{{ item[1].value }}"
      pat: <Row No="{{idx}}">(?:[^<]*<DM)*[^<]*<DM name="{{key|e|regex_escape}}" val="{{val|e|regex_escape}}"
    when:
    - WANC
    - raw_cfgs.stdout is not search(pat, multiline=True)
    set_fact:
      cmds: "{{ cmds + [ ['sendcmd', 1, 'DB', 'set', 'WANC', idx, key, val] ] }}"

  # DO NOT save, we need save each wan ports on web to avoid conflicts
  - name: Join each cmd
    when: cmds
    set_fact:
      cmds: "{{ cmds
                | map('map', 'ansible.builtin.quote')
                | map('join', ' ')
                | map('ansible.builtin.regex_replace', '^(sendcmd 1 DB set .*)$', '\\1 >/dev/null') }}"

  - name: Fail fast for command list
    when: cmds
    set_fact:
      cmds: "{{ [ 'set -uf +e',
                  '_err=0',
                  'no_err() { [ $_err = 0 ]; }',
                  'found_err() { _err=$(( _err < $? ? $? : _err )); }',
                ]
                + ( cmds | map('ansible.builtin.regex_replace', '^(.*)$', 'no_err && { \\1; } || found_err'))
                + [ 'echo rc=$_err' ] }}"

  - name: Dump cmds for check mode
    when: cmds and ansible_check_mode
    ansible.builtin.debug:
      var: cmds

  - name: Update WANC
    when: cmds and not ansible_check_mode
    register: update_wanc
    ansible.netcommon.telnet:
      login_prompt: "Login: "
      port: "{{ ansible_port }}"
      prompts: [ " #" ]
      timeout: 10
      command: "{{ cmds }}"
    failed_when: update_wanc is failed or update_wanc.stdout is not search("rc=0")

  - name: All wan ports are updated
    when: not cmds
    ansible.builtin.debug:
      msg: All wan ports are updated
