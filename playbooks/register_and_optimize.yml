---
- hosts: target_onu 
  gather_facts: False
  vars:
    cmds: []
  tasks:
  - name: Print tables
    register: raw_cfgs
    check_mode: False
    ansible.netcommon.telnet:
      login_prompt: "Login: "
      port: "{{ ansible_port }}"
      prompts: [ " #" ]
      timeout: 5
      command:
      - err=0
      - sendcmd 1 DB p MgtServer; err=$(( err + $? ))
      - sendcmd 1 DB p PDTCTUSERINFO; err=$(( err + $? ))
      - sendcmd 1 DB p CltLmt; err=$(( err + $? ))
      - sendcmd 1 DB p WANC; err=$(( err + $? ))
      - sendcmd 1 DB p WLCInfo; err=$(( err + $? ))
      - sendcmd 1 DB p FWBase; err=$(( err + $? ))
      - sendcmd 1 DB p QOSBasic; err=$(( err + $? ))
      - sendcmd 1 DB p QOSDownBasic; err=$(( err + $? ))
      - sendcmd 1 DB p FWALG; err=$(( err + $? ))
      - echo rc=$err
    changed_when: False
    failed_when: raw_cfgs is failed or
      raw_cfgs.stdout is not search('rc=0', multiline=True)

  - name: Row counts
    vars:
      MgtServer_c: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"MgtServer\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"
      PDTCTUSERINFO_c: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"PDTCTUSERINFO\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"
      FWBase_c: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"FWBase\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"
      QOSBasic_c: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"QOSBasic\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"
      QOSDownBasic_c: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"QOSDownBasic\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"
      FWALG_c: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"FWALG\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"
    set_fact:
      CltLmt_c: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"CltLmt\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"
      WANC_c: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"WANC\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"
      WLCInfo_c: "{{ raw_cfgs.stdout
        | ansible.builtin.regex_search('<Tbl name=\"WLCInfo\" RowCount=\"([0-9]+)\">', '\\1', multiline=True)
        | first | int }}"
    failed_when: MgtServer_c != 1 or PDTCTUSERINFO_c != 1 or FWBase_c != 1 or QOSBasic_c != 1 or QOSDownBasic_c != 1 or FWALG_c != 1

  - name: Split raw logs into tables
    vars:
      tbl_array: "{{ raw_cfgs.stdout | ansible.builtin.regex_findall(
            '<Tbl (?:[^<]*<Row (?:[^<]*<DM [^>]*>)+[^<]*</Row>)*[^<]*</Tbl>',
            multiline=True) }}"
    set_fact:
      # table order is important
      mgt_cfg: "{{ tbl_array[0] }}"
      pdtct_cfg: "{{ tbl_array[1] }}"
      cltlmt_cfg: "{{ tbl_array[2] }}"
      wanc_cfg: "{{ tbl_array[3] }}"
      wlcinfo_cfg: "{{ tbl_array[4] }}"
      fwbase_cfg: "{{ tbl_array[5] }}"
      qos_up_cfg: "{{ tbl_array[6] }}"
      qos_down_cfg: "{{ tbl_array[7] }}"
      nat_cfg: "{{ tbl_array[8] }}"

  - name: Check {{tbl}} keys
    loop: "{{ hostvars[inventory_hostname][tbl] | dict2items | map(attribute='key') }}"
    vars:
      tbl: MgtServer
      pat: <DM name="{{item|e|regex_escape}}"
    ansible.builtin.assert:
      that: mgt_cfg is search(pat, multiline=True)
      msg: Table {{tbl}} does not contain the key {{ item }}

  - name: Compare {{tbl}} values
    loop: "{{ hostvars[inventory_hostname][tbl] | dict2items }}"
    vars:
      tbl: MgtServer
      pat: <DM name="{{item.key|e|regex_escape}}" val="{{item.value|e|regex_escape}}"
    when: mgt_cfg is not search(pat, multiline=True)
    set_fact:
      cmds: "{{ cmds + [ ['sendcmd', 1, 'DB', 'set', tbl, 0, item.key, item.value] ] }}"

  - name: Check {{tbl}} keys
    loop: "{{ hostvars[inventory_hostname][tbl] | dict2items | map(attribute='key') }}"
    vars:
      tbl: PDTCTUSERINFO
      pat: <DM name="{{item|e|regex_escape}}"
    ansible.builtin.assert:
      that: pdtct_cfg is search(pat, multiline=True)
      msg: Table {{tbl}} does not contain the key {{ item }}

  - name: Compare {{tbl}} values
    loop: "{{ hostvars[inventory_hostname][tbl] | dict2items }}"
    vars:
      tbl: PDTCTUSERINFO
      pat: <DM name="{{item.key|e|regex_escape}}" val="{{item.value|e|regex_escape}}"
    when: pdtct_cfg is not search(pat, multiline=True)
    set_fact:
      cmds: "{{ cmds + [ ['sendcmd', 1, 'DB', 'set', tbl, 0, item.key, item.value] ] }}"

  - name: Check {{tbl}} keys
    vars:
      tbl: CltLmt
      pat: <DM name="Enable"
    when: CltLmt_c > 0
    ansible.builtin.assert:
      that: cltlmt_cfg is search(pat, multiline=True)
      msg: Table {{tbl}} does not contain the key Enable

  - name: Disable all limits in {{tbl}} table
    loop: "{{ range(0, CltLmt_c) }}"
    vars:
      tbl: CltLmt
      pat: <Row No="{{item}}">(?:[^<]*<DM)*[^<]*<DM name="Enable" val="0"
    when: cltlmt_cfg is not search(pat, multiline=True)
    set_fact:
      cmds: "{{ cmds + [ ['sendcmd', 1, 'DB', 'set', tbl, item, 'Enable', 0] ] }}"

  - name: Check {{tbl}} keys
    vars:
      tbl: WANC
      pat1: <DM name="Enable"
      pat2: <DM name="StrServList"
    when: WANC_c > 0
    ansible.builtin.assert:
      that:
      - wanc_cfg is search(pat1, multiline=True)
      - wanc_cfg is search(pat2, multiline=True)
      msg: Table {{tbl}} does not contain the key Enable

  - name: Disable TR069 entries in {{tbl}} table
    loop: "{{ range(0, WANC_c) }}"
    vars:
      tbl: WANC
      pat_tr069: <Row No="{{item}}">(?:[^<]*<DM)*[^<]*<DM name="StrServList" val="TR069"
      pat_disable: <Row No="{{item}}">(?:[^<]*<DM)*[^<]*<DM name="Enable" val="0"
    when:
    - wanc_cfg is search(pat_tr069, multiline=True)
    - wanc_cfg is not search(pat_disable, multiline=True)
    set_fact:
      cmds: "{{ cmds + [ ['sendcmd', 1, 'DB', 'set', tbl, item, 'Enable', 0] ] }}"

  - name: Set Led on/off
    loop: "{{ hostvars[inventory_hostname][tbl] | dict2items }}"
    vars:
      tbl: WLCInfo
      pat: <DM name="{{item.key|e|regex_escape}}" val="{{item.value|e|regex_escape}}"
    when:
    - WLCInfo_c > 0
    - wlcinfo_cfg is not search(pat, multiline=True)
    set_fact:
      cmds: "{{ cmds + [
          ['sendcmd', 1, 'DB', 'set', tbl, 0, item.key, item.value],
          ['tso', (item.value == 0) | ternary('allon', 'alloff') ]
        ] }}"

  - name: Set basic firewall config
    loop: "{{ hostvars[inventory_hostname][tbl] | dict2items }}"
    vars:
      tbl: FWBase
      pat: <DM name="{{item.key|e|regex_escape}}" val="{{item.value|e|regex_escape}}"
    when: fwbase_cfg is not search(pat, multiline=True)
    set_fact:
      cmds: "{{ cmds + [ ['sendcmd', 1, 'DB', 'set', tbl, 0, item.key, item.value] ] }}"

  - name: Set up qos cnofig
    loop: "{{ hostvars[inventory_hostname][tbl] | dict2items }}"
    vars:
      tbl: QOSBasic
      pat: <DM name="{{item.key|e|regex_escape}}" val="{{item.value|e|regex_escape}}"
    when: qos_up_cfg is not search(pat, multiline=True)
    set_fact:
      cmds: "{{ cmds + [ ['sendcmd', 1, 'DB', 'set', tbl, 0, item.key, item.value] ] }}"

  - name: Set down qos cnofig
    loop: "{{ hostvars[inventory_hostname][tbl] | dict2items }}"
    vars:
      tbl: QOSDownBasic
      pat: <DM name="{{item.key|e|regex_escape}}" val="{{item.value|e|regex_escape}}"
    when: qos_down_cfg is not search(pat, multiline=True)
    set_fact:
      cmds: "{{ cmds + [ ['sendcmd', 1, 'DB', 'set', tbl, 0, item.key, item.value] ] }}"

  - name: Set NAT algo
    loop: "{{ hostvars[inventory_hostname][tbl] | dict2items }}"
    vars:
      tbl: FWALG
      pat: <DM name="{{item.key|e|regex_escape}}" val="{{item.value|e|regex_escape}}"
    when: nat_cfg is not search(pat, multiline=True)
    set_fact:
      cmds: "{{ cmds + [ ['sendcmd', 1, 'DB', 'set', tbl, 0, item.key, item.value] ] }}"

  - name: Join each cmd
    when: cmds
    set_fact:
      cmds: "{{ ( cmds + [ ['sendcmd', 1, 'DB', 'save'] ] )
                | map('map', 'ansible.builtin.quote')
                | map('join', ' ')
                | map('ansible.builtin.regex_replace', '^(sendcmd 1 DB set .*)$', '\\1 >/dev/null') }}"

  - name: Fail fast for command list
    when: cmds
    set_fact:
      cmds: "{{ [ 'set -uf +e',
                  '_err=0',
                  'no_err() { [ $_err = 0 ]; }',
                  'found_err() { _err=$(( _err < $? ? $? : _err )); }',
                ]
                + ( cmds | map('ansible.builtin.regex_replace', '^(.*)$', 'no_err && { \\1; } || found_err'))
                + [ 'echo rc=$_err' ] }}"

  - name: Dump cmds for check mode
    when: cmds and ansible_check_mode
    ansible.builtin.debug:
      var: cmds

  - name: Execute telnet commands
    when: cmds and not ansible_check_mode
    register: update_cfg
    ansible.netcommon.telnet:
      login_prompt: "Login: "
      port: "{{ ansible_port }}"
      prompts: [ " #" ]
      timeout: 10
      command: "{{ cmds }}"
    failed_when: update_cfg is failed or update_cfg.stdout is not search("rc=0")

  - name: Already updated
    when: not cmds
    ansible.builtin.debug:
      msg: Already updated
